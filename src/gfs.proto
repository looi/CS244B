syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "HLW";
import "google/protobuf/timestamp.proto";

package gfs;

// The GFS Benchmark Data CollectingService
service GFSBenchmark {
  // Client -> BenchmarkServer RPCs
  // --------------------------

  // Add a test description
  rpc ClientBMHandshake (ClientBMHandshakeRequest) returns (ClientBMHandshakeReply) {}

  // Add a data point
  rpc AddData (AddDataRequest) returns (AddDataReply) {}
}

message ClientBMHandshakeRequest {
  int64 id = 1;
  string operation = 2;
  string method = 3;
  int64 size = 4;
}

message ClientBMHandshakeReply {
  string message = 1;
}

message AddDataRequest {
  int64 id = 1;
  int64 duration = 2;
}

message AddDataReply {
  string message = 1;
}

// The GFS service definition.
service GFS {
  // Client -> Chunkserver RPCs
  // --------------------------

  // Read data
  rpc ReadChunk (ReadChunkRequest) returns (ReadChunkReply) {}
  // Write data
  rpc WriteChunk (WriteChunkRequest) returns (WriteChunkReply) {}
  // Push data
  rpc PushData (PushDataRequest) returns (PushDataReply) {}
  // Sends a ping
  rpc ClientServerPing (PingRequest) returns (PingReply) {}

  // Append
  rpc Append (AppendRequest) returns (AppendReply) {}

  // Master -> Chunkserver RPCs
  // --------------------------
  rpc ReplicateChunks (ReplicateChunksRequest) returns (ReplicateChunksReply) {}

  // Delete chunks when master knows it is no longer needed.
  rpc DeleteChunks (DeleteChunksRequest) returns (DeleteChunksReply) {}

  // Chunkserver -> Chunkserver RPCs
  // --------------------------

  // SerializedWrite from primary to replica ChunkServers
  rpc SerializedWrite (SerializedWriteRequest) returns (SerializedWriteReply) {}

  // CopyChunks from one replica to a new replica ChunkServer
  rpc CopyChunks (CopyChunksRequest) returns (CopyChunksReply) {}
}

// The request message containing the user's name.
message PingRequest {
  string name = 1;
}

// The response message containing the greeting
message PingReply {
  string message = 1;
}

// Read Chunk Request
message ReadChunkRequest {
  int64 chunkhandle = 1;
  int64 offset = 2;
  int64 length = 3;
}

// Write Chunk Request
message WriteChunkRequest {
  int64 client_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  int64 chunkhandle = 3;
  int64 offset = 4;
  repeated string locations = 5;
}

// Serialized Write Request
message SerializedWriteRequest {
  int64 client_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  int64 chunkhandle = 3;
  int64 offset = 4;
  bool padded_chunk = 5;
}

// Append Request
message AppendRequest {
  int64 client_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  int64 chunkhandle = 3;
  int64 length = 4;
  repeated string locations = 5;
}

// Read Chunk Reply
message ReadChunkReply {
  string data = 1;
  int64 bytes_read = 2;
// TODO: hash of the data
}

// Write Chunk Reply
message WriteChunkReply {
  int64 bytes_written = 1;
}

message SerializedWriteReply {
  int64 bytes_written = 1;
}

// Append Reply
message AppendReply {
  int64 offset = 1;
  int64 bytes_written = 2;
}

// PushData Request
message PushDataRequest {
  int64 client_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  string data = 3;
}

// PushData Reply
message PushDataReply {
}

message ReplicateChunksRequest {
  message ChunkInfo {
    int64 chunkhandle = 1;
    // TODO int64 version = 2;
  }
  // All chunks to replicate to location.
  repeated ChunkInfo chunks = 1;
  // The location is a string "IP:port" like "127.0.0.1:12345".
  // - It should be the location of a new ChunkServer to replicate data to
  string location = 2;
}

// Status returned will be OK (or a network error).
message ReplicateChunksReply {}

message DeleteChunksRequest {
  // List of chunkhandles to delete.
  repeated int64 chunkhandles = 1;
}

message DeleteChunksReply {}

message CopyChunksRequest {
  message ChunkInfo {
    int64 chunkhandle = 1;
    string data = 2;
    // TODO int64 version = 3;
  }
  // All chunks to copy.
  repeated ChunkInfo chunks = 1;
}

// Status returned will be OK (or a network error).
message CopyChunksReply {}

service GFSMaster {
  // Client -> Master RPCs
  // ---------------------
 
  // List all files with filename matching a certain prefix.
  // - Directories are part of the filename, e.g. "abc/def/ghi.txt"
  rpc FindMatchingFiles (FindMatchingFilesRequest) returns (FindMatchingFilesReply) {}

  // For a given filename and chunk index, returns the chunk handle and locations of replicas.
  // - Does not attempt to create the chunk.
  // - Should be used for read requests.
  rpc FindLocations (FindLocationsRequest) returns (FindLocationsReply) {}

  // For a given filename and chunk index, returns the chunk handle and locations of replicas.
  // - Will create the chunk if it does not exists (this replaces AddChunk).
  // - Also identifies the primary (lease holder).
  // - (in actual GFS) For chunks that are copy-on-write, this will perform the copy.
  // - Should be used for write requests.
  rpc FindLeaseHolder (FindLeaseHolderRequest) returns (FindLeaseHolderReply) {}

  // Requests master to move (rename) the file.
  rpc MoveFile (MoveFileRequest) returns (MoveFileReply) {}

  // Requests master to delete file.
  rpc DeleteFile (DeleteFileRequest) returns (DeleteFileReply) {}

  // For a given filename and chunk index, allocate chunk servers, returns the chunk handle and
  // locations of replicas.
  rpc AddChunk (AddChunkRequest) returns (AddChunkReply) {}

  // For a given filename, returns the length of the file.
  rpc GetFileLength (GetFileLengthRequest) returns (GetFileLengthReply) {}

  // Chunkserver -> Master RPCs
  // --------------------------

  // Chunkserver should periodically send heartbeats to the master, once every few seconds.
  // - If the master does not receive a heartbeat for some time, it will assume failure.
  // - When master restarts, it will send this to get the chunks.
  rpc Heartbeat (HeartbeatRequest) returns (HeartbeatReply) {}

  // Master -> Master RPCs
  // ---------------------

  // TODO: RPC to replicate data to shadow masters.
}

message FindMatchingFilesRequest {
  string prefix = 1;
}

// Status returned will be OK (or a network error).
message FindMatchingFilesReply {
  message File {
    string filename = 1;
  }
  repeated File files = 1;
}

message FindLocationsRequest {
  string filename = 1;
  int64 chunk_index = 2;
}

// Status returned may be OK or NOT_FOUND (or a network error).
message FindLocationsReply {
  int64 chunkhandle = 1;
  // Each location is a string "IP:port" like "127.0.0.1:12345".
  repeated string locations = 2;
}

message FindLeaseHolderRequest {
  string filename = 1;
  int64 chunk_index = 2;
}

// Status returned may be OK or NOT_FOUND (or a network error).
message FindLeaseHolderReply {
  int64 chunkhandle = 1;
  // Each location is a string "IP:port" like "127.0.0.1:12345".
  repeated string locations = 2;
  // The primary location is also "IP:port". It will be also present in locations.
  string primary_location = 3;
}

message MoveFileRequest {
  string old_filename = 1;
  string new_filename = 2;
}

// Status returned may be OK or NOT_FOUND (or a network error).
message MoveFileReply {}

message DeleteFileRequest {
  string filename = 1;
}

// Status returned may be OK or NOT_FOUND (or a network error).
message DeleteFileReply {}

message AddChunkRequest {
  string filename = 1;
  int64 chunk_index = 2;
}

message AddChunkReply {
  // TODO: define the reply
}

message GetFileLengthRequest {
  string filename = 1;
}

message GetFileLengthReply {
  int64 num_chunks = 1;
}

message HeartbeatRequest {
  message ChunkInfo {
    int64 chunkhandle = 1;
    // TODO int64 version = 2;
  }
  // All chunks stored in chunkserver.
  repeated ChunkInfo chunks = 1;
  // The location is a string "IP:port" like "127.0.0.1:12345".
  // - It should be the location of the chunkserver's GRPC server.
  string location = 2;
}

// Status returned will be OK (or a network error).
message HeartbeatReply {}
